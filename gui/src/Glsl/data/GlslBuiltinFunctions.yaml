- label: radians
  kind: 25
  insertTextRules: 4
  insertText: "radians($1)"
  detail: >-
    convert a quantity in degrees to radians
  documentation:
    value: |
      *Radians*

      ``` glsl
      float radians(float degrees)
      vec2 radians(vec2 degrees)
      vec3 radians(vec3 degrees)
      vec4 radians(vec4 degrees)
      ```

      The `radians` function converts degrees to radians. The input parameter
      can be a floating scalar or a float vector. In case of a float vector all
      components are converted from degrees to radians separately.

      - <http://docs.gl/sl4/radians>
      - <https://www.shaderific.com/glsl-functions>

- label: degrees
  kind: 25
  insertTextRules: 4
  insertText: "degrees($1)"
  detail: >-
    convert a quantity in radians to degrees
  documentation:
    value: |
      **Degrees**

      ``` glsl
      float degrees(float radians)
      vec2 degrees(vec2 radians)
      vec3 degrees(vec3 radians)
      vec4 degrees(vec4 radians)
      ```

      The `degrees` function converts radians to degrees. The input parameter
      can be a floating scalar or a float vector. In case of a float vector
      every component is converted from radians to degrees separately.

      - <http://docs.gl/sl4/degrees>
      - <https://www.shaderific.com/glsl-functions>

- label: sin
  detail: >-
    return the sine of the parameter
  documentation:
    value: |
      **Sine**

      ``` glsl
      float sin(float angle)
      vec2 sin(vec2 angle)
      vec3 sin(vec3 angle)
      vec4 sin(vec4 angle)
      ```

      The `sin` function returns the sine of an angle in radians. The input
      parameter can be a floating scalar or a float vector. In case of a float
      vector the sine is calculated separately for every component.

      - <http://docs.gl/sl4/sin>
      - <https://www.shaderific.com/glsl-functions>

- label: cos
  detail: >-
    return the cosine of the parameter
  documentation:
    value: |
      **Cosine**

      ``` glsl
      float cos(float angle)
      vec2 cos(vec2 angle)
      vec3 cos(vec3 angle)
      vec4 cos(vec4 angle)
      ```

      The `cos` function returns the cosine of an angle in radians. The input
      parameter can be a floating scalar or a float vector. In case of a float
      vector the cosine is calculated separately for every component.

      - <http://docs.gl/sl4/cos>
      - <https://www.shaderific.com/glsl-functions>

- label: clamp
  kind: 25
  insertTextRules: 4
  insertText: "clamp(${1:x}, ${2:minVal}, ${3:maxVal})"
  detail: >-
    constrain a value to lie between two further values
  documentation:
    value: |
      **Clamp**

      ``` glsl
      float clamp(float x, float minVal, float maxVal)
      vec2 clamp(vec2 x, vec2 minVal, vec2 maxVal)
      vec3 clamp(vec3 x, vec3 minVal, vec3 maxVal)
      vec4 clamp(vec4 x, vec4 minVal, vec4 maxVal)
      ```

      The `clamp` function returns x if it is larger than minVal and smaller
      than maxVal. In case x is smaller than minVal, minVal is returned. If x
      is larger than maxVal, maxVal is returned. The input parameters can be
      floating scalars or float vectors. In case of float vectors the operation
      is done component-wise.

      ``` glsl
      float clamp(float x, float minVal, float maxVal)
      vec2 clamp(vec2 x, float minVal, float maxVal)
      vec3 clamp(vec3 x, float minVal, float maxVal)
      vec4 clamp(vec4 x, flfloat minVal, float maxVal)
      ```

      There is also a variation of the `clamp` function where the second and
      third parameters are always a floating scalars.

      - <http://docs.gl/sl4/clamp>
      - <https://www.shaderific.com/glsl-functions>

- label: mix
  kind: 25
  insertTextRules: 4
  insertText: "mix(${1:x}, ${2:y}, ${3:a})"
  detail: >-
    linearly interpolate between two values
  documentation:
    value: |
      **Mix**

      ``` glsl
      float mix(float x, float y, float a)
      vec2 mix(vec2 x, vec2 y, vec2 a)
      vec3 mix(vec3 x, vec3 y, vec3 a)
      vec4 mix(vec4 x, vec4 y, vec4 a)
      ```

      The `mix` function returns the linear blend of x and y, i.e. the product of
      x and (1 - a) plus the product of y and a. The input parameters can be
      floating scalars or float vectors. In case of float vectors the operation
      is done component-wise.

      ``` glsl
      float mix(float x, float y, float a)
      vec2 mix(vec2 x, vec2 y, float a)
      vec3 mix(vec3 x, vec3 y, float a)
      vec4 mix(vec4 x, vec4 y, float a)
      ```

      There is also a variation of the `mix` function where the third parameter
      is always a floating scalar.

      - <http://docs.gl/sl4/mix>
      - <https://www.shaderific.com/glsl-functions>

- label: step
  kind: 25
  insertTextRules: 4
  insertText: "step(${1:edge}, ${2:x})"
  detail: >-
    generate a step function by comparing two values
  documentation:
    value: |
      **Step**

      ``` glsl
      float step(float edge, float x)
      vec2 step(vec2 edge, vec2 x)
      vec3 step(vec3 edge, vec3 x)
      vec4 step(vec4 edge, vec4 x)
      ```

      The `step` function returns 0.0 if x is smaller then edge and otherwise
      1.0. The input parameters can be floating scalars or float vectors. In
      case of float vectors the operation is done component-wise.

      ``` glsl
      float step(float edge, float x)
      vec2 step(float edge, vec2 x)
      vec3 step(float edge, vec3 x)
      vec4 step(float edge, vec4 x)
      ```

      There is also a variation of the `step` function where the edge parameter
      is always a floating scalar.

      - <http://docs.gl/sl4/step>
      - <https://www.shaderific.com/glsl-functions>

- label: smoothstep
  kind: 25
  insertTextRules: 4
  insertText: "smoothstep(${1:edge0}, ${2:edge1}, ${3:x})"
  detail: >-
    perform Hermite interpolation between two values
  documentation:
    value: |
      **Smoothstep**

      ``` glsl
      float smoothstep(float edge0, float edge1, float x)
      vec2 smoothstep(vec2 edge0, vec2 edge1, vec2 x)
      vec3 smoothstep(vec3 edge0, vec3 edge1, vec3 x)
      vec4 smoothstep(vec4 edge0, vec4 edge1, vec4 x)
      ```

      The `smoothstep` function returns 0.0 if x is smaller then edge0 and 1.0
      if x is larger than edge1. Otherwise the return value is interpolated
      between 0.0 and 1.0 using Hermite polynomials. The input parameters can
      be floating scalars or float vectors. In case of float vectors the
      operation is done component-wise.

      ``` glsl
      float smoothstep(float edge0, float edge1, float x)
      vec2 smoothstep(float edge0, float edge1, vec2 x)
      vec3 smoothstep(float edge0, float edge1, vec3 x)
      vec4 smoothstep(float edge0, float edge1, vec4 x)
      ```

      There is also a variation of the `smoothstep` function where the edge0
      and edge1 parameters are always floating scalars.

      - <http://docs.gl/sl4/smoothstep>
      - <https://www.shaderific.com/glsl-functions>

- label: length
  kind: 25
  insertTextRules: 4
  insertText: "length($1)"
  detail: >-
    calculate the length of a vector
  documentation:
    value: |
      **Length**

      ``` glsl
      float length(float x)
      float length(vec2 x)
      float length(vec3 x)
      float length(vec4 x)
      ```

      The `length` function returns the length of a vector defined by the
      Euclidean norm, i.e. the square root of the sum of the squared
      components. The input parameter can be a floating scalar or a float
      vector. In case of a floating scalar the length function is trivial and
      returns the absolute value.

      - <http://docs.gl/sl4/length>
      - <https://www.shaderific.com/glsl-functions>

- label: distance
  kind: 25
  insertTextRules: 4
  insertText: "distance(${1:p0}, ${2:p1})"
  detail: >-
    calculate the distance between two points
  documentation:
    value: |
      **Distance**

      ``` glsl
      float distance(float p0, float p1)
      float distance(vec2 p0, vec2 p1)
      float distance(vec3 p0, vec3 p1)
      float distance(vec4 p0, vec4 p1)
      ```

      The `distance` function returns the distance between two points. The
      distance of two points is the length of the vector `d = p0 - p1`, that
      starts at p1 and points to p0. The input parameters can be floating
      scalars or float vectors. In case of floating scalars the `distance`
      function is trivial and returns the absolute value of d.

      - <http://docs.gl/sl4/distance>
      - <https://www.shaderific.com/glsl-functions>

- label: dot
  kind: 25
  insertTextRules: 4
  insertText: "dot(${1:x}, ${2:y})"
  detail: >-
    calculate the dot product of two vectors
  documentation:
    value: |
      **Dot product**

      ``` glsl
      float dot(float x, float y)
      float dot(vec2 x, vec2 y)
      float dot(vec3 x, vec3 y)
      float dot(vec4 x, vec4 y)
      ```

      The `dot` function returns the dot product of the two input parameters,
      i.e. the sum of the component-wise products. If x and y are the same the
      square root of the dot product is equivalent to the length of the vector.
      The input parameters can be floating scalars or float vectors. In case of
      floating scalars the `dot` function is trivial and returns the product of
      x and y.

      - <http://docs.gl/sl4/dot>
      - <https://www.shaderific.com/glsl-functions>

- label: cross
  kind: 25
  insertTextRules: 4
  insertText: "cross(${1:x}, ${2:y})"
  detail: >-
    calculate the cross product of two vectors
  documentation:
    value: |
      **Cross product**

      ``` glsl
      vec3 cross(vec3 x, vec3 y)
      ```

      The `cross` function returns the cross product of the two input
      parameters, i.e. a vector that is perpendicular to the plane containing x
      and y and has a magnitude that is equal to the area of the parallelogram
      that x and y span. The input parameters can only be 3-component floating
      vectors. The cross product is equivalent to the product of the length of
      the vectors times the sinus of the (smaller) angle between x and y.

      - <http://docs.gl/sl4/cross>
      - <https://www.shaderific.com/glsl-functions>

- label: normalize
  kind: 25
  insertTextRules: 4
  insertText: "normalize($1)"
  detail: >-
    calculate the normalize product of two vectors
  documentation:
    value: |
      **Normalize**

      ``` glsl
      float normalize(float x)
      vec2 normalize(vec2 x)
      vec3 normalize(vec3 x)
      vec4 normalize(vec4 x)
      ```

      The `normalize` function returns a vector with length 1.0 that is
      parallel to x, i.e. x divided by its length. The input parameter can be a
      floating scalar or a float vector. In case of a floating scalar the
      `normalize` function is trivial and returns 1.0.

      - <http://docs.gl/sl4/normalize>
      - <https://www.shaderific.com/glsl-functions>

- label: faceforward
  kind: 25
  insertTextRules: 4
  insertText: "faceforward(${1:vec to orient}, ${2:incident vec}, ${3:reference vec})"
  detail: >-
    return a vector pointing in the same direction as another
  documentation:
    value: |
      **Faceforward**

      ``` glsl
      float faceforward(float N, float I, float Nref)
      vec2 faceforward(vec2 N, vec2 I, vec2 Nref)
      vec3 faceforward(vec3 N, vec3 I, vec3 Nref)
      vec4 faceforward(vec4 N, vec4 I, vec4 Nref)
      ```

      The `faceforward` function returns a vector that points in the same
      direction as a reference vector. The function has three input parameters
      of the type floating scalar or float vector: N, the vector to orient, I,
      the incident vector, and Nref, the reference vector. If the dot product
      of I and Nref is smaller than zero the return value is N. Otherwise -N is
      returned.

      - <http://docs.gl/sl4/faceforward>
      - <https://www.shaderific.com/glsl-functions>

- label: reflect
  kind: 25
  insertTextRules: 4
  insertText: "reflect(${1:incident vec}, ${2:surface normal vec})"
  detail: >-
    calculate the reflection direction for an incident vector
  documentation:
    value: |
      **Reflect**

      ``` glsl
      float reflect(float I, float N)
      vec2 reflect(vec2 I, vec2 N)
      vec3 reflect(vec3 I, vec3 N)
      vec4 reflect(vec4 I, vec4 N)
      ```

      The `reflect` function returns a vector that points in the direction of
      reflection. The function has two input parameters of the type floating
      scalar or float vector: I, the incident vector, and N, the normal vector
      of the reflecting surface.

      Side note: To obtain the desired result the vector N has to be
      normalized. The reflection vector always has the same length as the
      incident vector. From this it follows that the reflection vector is
      normalized if N and I are both normalized.

      - <http://docs.gl/sl4/reflect>
      - <https://www.shaderific.com/glsl-functions>

- label: refract
  kind: 25
  insertTextRules: 4
  insertText: "refract(${1:incident vec}, ${2:surface normal vec}, ${3:refraction ratio})"
  detail: >-
    calculate the refraction direction for an incident vector
  documentation:
    value: |
      **Refract**

      ``` glsl
      float refract(float I, float N, float eta)
      vec2 refract(vec2 I, vec2 N, float eta)
      vec3 refract(vec3 I, vec3 N, float eta)
      vec4 refract(vec4 I, vec4 N, float eta)
      ```

      The `refract` function returns a vector that points in the direction of
      refraction. The function has two input parameters of the type floating
      scalar or float vector and one input parameter of the type floating
      scalar: I, the incident vector, N, the normal vector of the refracting
      surface, and eta, the ratio of indices of refraction.

      Side note: To obtain the desired result the vectors I and N have to be
      normalized.

      - <http://docs.gl/sl4/refract>
      - <https://www.shaderific.com/glsl-functions>

- label: matrixCompMult
  detail: >-
    perform a component-wise multiplication of two matrices
  documentation:
    value: |
      **Component-wise matrix multiplication**

      ``` glsl
      mat2 matrixCompMult(mat2 x, mat2 y)
      mat3 matrixCompMult(mat3 x, mat3 y)
      mat4 matrixCompMult(mat4 x, mat4 y)
      ```

      The `matrixCompMult` function returns a matrix resulting from a
      component-wise multiplication. The function has two input parameters of
      the type floating point matrix and returns a matrix of the same type. The
      indices of the returned matrix are calculated as follows: `z[i][j] =
      x[i][j] * y[i][j]`.

      Side note: This is NOT the matrix multiplication known from linear
      algebra. To obtain the "normal" matrix multiplication the operator is
      used: `z = x * y`.

      - <http://docs.gl/sl4/matrixCompMult>
      - <https://www.shaderific.com/glsl-functions>

- label: inverse
  detail: >-
    calculate the inverse of a matrix

- label: transpose
  detail: >-
    calculate the transpose of a matrix

- label: textureCube

- label: texture
  kind: 25
  insertTextRules: 4
  insertText: "texture(${1:sampler}, ${2:uv})"
  detail: >-
    retrieves texels from a texture
  documentation:
    value: |
      **Texture lookup**

      ``` glsl
      gvec4 texture(gsampler1D sampler, float P, [float bias]);
      gvec4 texture(gsampler2D sampler, vec2 P, [float bias]);
      gvec4 texture(gsampler3D sampler, vec3 P, [float bias]);
      gvec4 texture(gsamplerCube sampler, vec3 P, [float bias]);
      ```

      The `texture` function returns a texel, i.e. the (color) value of the
      texture for the given coordinates.

      There is an optional third input parameter of the type float: `bias`.
      After calculating the appropriate level of detail for a texture with
      mipmaps the bias is added before the actual texture lookup operation is
      executed.

      **NOTE:** `texture2D()` and `textureCube()` is deprecated. Using
      `texture()` is recommended.

      - <http://docs.gl/sl4/texture>
      - <https://www.shaderific.com/glsl-functions>

- label: textureLod
  detail: >-
    perform a texture lookup with explicit level-of-detail

- label: textureGrad
  detail: >-
    perform a texture lookup with explicit gradients

- label: textureProj
  detail: >-
    perform a texture lookup with projection

- label: texture2D
  detail: >-
    retrieves texels from a texture
  documentation:
  documentation:
    value: |
      Sample a 2D texture.

      **NOTE:** `texture2D()` is deprecated since OpenGL 3.3. Using `texture()`
      is recommended.

- label: abs
- label: acos
- label: acosh
- label: all
- label: allInvocation
- label: any
- label: anyInvocation
- label: anyInvocationsEqual
- label: asin
- label: asinh
- label: atan
- label: atanh
- label: atomicAdd
- label: atomicAnd
- label: atomicCompSwap
- label: atomicCounter
- label: atomicCounterAdd
- label: atomicCounterAnd
- label: atomicCounterCompSwap
- label: atomicCounterDecrement
- label: atomicCounterExchange
- label: atomicCounterIncrement
- label: atomicCounterMax
- label: atomicCounterMin
- label: atomicCounterOr
- label: atomicCounterSubtract
- label: atomicCounterXor
- label: atomicExchange
- label: atomicMax
- label: atomicMin
- label: atomicOr
- label: atomicXor
- label: barrier
- label: bitCount
- label: bitfieldExtract
- label: bitfieldInsert
- label: bitfieldReverse
- label: ceil
- label: cosh
- label: determinant
- label: dFdx
- label: dFdxCoarse
- label: dFdxFine
- label: dFdy
- label: dFdyCoarse
- label: dFdyFine
- label: EmitStreamVertex
- label: EmitVertex
- label: EndPrimitive
- label: EndStreamPrimitive
- label: equal
- label: exp
- label: exp2
- label: findLSB
- label: findMSB
- label: floatBitsToInt
- label: floatBitsToUint
- label: floor
- label: fma
- label: fract
- label: frexp
- label: ftransform
- label: fwidth
- label: fwidthCoarse
- label: fwidthFine
- label: greaterThan
- label: greaterThanEqual
- label: groupMemoryBarrier
- label: imageAtomicAdd
- label: imageAtomicAnd
- label: imageAtomicCompSwap
- label: imageAtomicExchange
- label: imageAtomicMax
- label: imageAtomicMin
- label: imageAtomicOr
- label: imageAtomicXor
- label: imageLoad
- label: imageSamples
- label: imageSize
- label: imageStore
- label: imulExtended
- label: intBitsToFloat
- label: interpolateAtCentroid
- label: interpolateAtOffset
- label: interpolateAtSample
- label: inversesqrt
- label: isinf
- label: isnan
- label: ldexp
- label: lessThan
- label: lessThanEqual
- label: log
- label: log2
- label: max
- label: memoryBarrier
- label: memoryBarrierAtomicCounter
- label: memoryBarrierBuffer
- label: memoryBarrierImage
- label: memoryBarrierShared
- label: min
- label: mod
- label: modf
- label: noise1
- label: noise2
- label: noise3
- label: noise4
- label: not
- label: notEqual
- label: outerProduct
- label: packDouble2x32
- label: packHalf2x16
- label: packSnorm2x16
- label: packSnorm4x8
- label: packUnorm2x16
- label: packUnorm4x8
- label: pow
- label: round
- label: roundEven
- label: shadow1D
- label: shadow1DLod
- label: shadow1DProj
- label: shadow1DProjLod
- label: shadow2D
- label: shadow2DLod
- label: shadow2DProj
- label: shadow2DProjLod
- label: sign
- label: sinh
- label: sqrt
- label: tan
- label: tanh
- label: texelFetch
- label: texelFetchOffset
- label: texture1D
- label: texture1DLod
- label: texture1DProj
- label: texture1DProjLod
- label: texture2DLod
- label: texture2DProj
- label: texture2DProjLod
- label: texture3D
- label: texture3DLod
- label: texture3DProj
- label: texture3DProjLod
- label: textureCubeLod
- label: textureGather
- label: textureGatherOffset
- label: textureGatherOffsets
- label: textureGradOffset
- label: textureLodOffset
- label: textureOffset
- label: textureProjGrad
- label: textureProjGradOffset
- label: textureProjLod
- label: textureProjLodOffset
- label: textureProjOffset
- label: textureQueryLevels
- label: textureQueryLod
- label: textureSamples
- label: textureSize
- label: trunc
- label: uaddCarry
- label: uintBitsToFloat
- label: umulExtended
- label: unpackDouble2x32
- label: unpackHalf2x16
- label: unpackSnorm2x16
- label: unpackSnorm4x8
- label: unpackUnorm2x16
- label: unpackUnorm4x8
- label: usubBorrow
