[
  {
    "label": "gl_Position",
    "detail": "contains the position of the current vertex",
    "documentation": {
      "value": "**Vertex position**\n\n``` glsl\nhighp vec4 gl_Position;\n```\n\nThe built-in variable **gl_Position** is used by the vertex shader to\nhand over the transformed vertex position to the OpenGL ES 2.0 pipeline.\nThe variable is declared as shown above and can be used in the vertex\nshader for an assignment without prior declaration.\n\nThe values of the position vector are interpreted in clip coordinate space. The\nvertex shader is responsible to execute all vertex manipulations, e.g. the\ntransformation from object coordinates to clip coordinates.\n\nThe assignment of values to this variable is mandatory for the vertex\nshader.\n\n- <http://docs.gl/sl4/gl_Position>\n- <https://www.shaderific.com/glsl-variables>\n"
    }
  },
  {
    "label": "gl_FragCoord",
    "detail": "contains the window-relative coordinates of the current fragment",
    "documentation": {
      "value": "**Fragment coordinates**\n\n``` glsl\nmediump vec4 gl_FragCoord;\n```\n\nThe built-in variable **gl_FragCoord** is used by the OpenGL ES 2.0 pipeline\nto hand over the coordinates of the fragment to the fragment shader. The\nvariable is read-only and the value is assigned by the OpenGL ES 2.0\npipeline.\n\nThe values of the fragment coordinate vector are given in the window\ncoordinate system.\n\n- <http://docs.gl/sl4/gl_FragCoord>\n- <https://www.shaderific.com/glsl-variables>\n"
    }
  },
  {
    "label": "gl_FrontFacing",
    "detail": "indicates whether a primitive is front or back facing",
    "documentation": {
      "value": "**Fragment orientation**\n\n``` glsl\nbool gl_FrontFacing;\n```\n\nThe built-in variable **gl_FrontFacing** is used by the OpenGL ES 2.0\npipeline to hand over the information to the fragment shader if the\nfragment is part of a front-facing primitive (triangle). The variable is\nread-only and the value is assigned by the OpenGL ES 2.0 pipeline.\n\nThe front-facing variable has a boolean value.\n\n- <http://docs.gl/sl4/gl_FrontFacing>\n- <https://www.shaderific.com/glsl-variables>\n"
    }
  },
  {
    "label": "gl_PointCoord",
    "detail": "contains the coordinate of a fragment within a point",
    "documentation": {
      "value": "**Point coordinates**\n\n``` glsl\nmediump int gl_PointCoord;\n```\n\nThe built-in variable **gl_PointCoord** is used by the OpenGL ES 2.0\npipeline to hand over the coordinates of a point sprite to the fragment\nshader. The variable is read-only and the value is calculated and\nassigned by the OpenGL ES 2.0 pipeline based on the position and radius\nof the point sprite..\n\nSide note: A value for this variable is provided by the OpenGL ES 2.0\npipeline only if the rendered primitives are points.\n\n- <http://docs.gl/sl4/gl_PointCoord>\n- <https://www.shaderific.com/glsl-variables>\n"
    }
  },
  {
    "label": "gl_FragColor",
    "detail": "(GL_ES 2.0) sets the fragment color",
    "documentation": {
      "value": "**Fragment color**\n\n**NOTE:** `gl_FragColor` is deprecated in GLSL 1.3 (OpenGL 3.0), only\navailable in OpenGL ES 2.0.  Instead, declare an `out` variable in the\nfragment shader:\n\n``` glsl\nout vec4 out_color;\n// ...\nvoid main() {\n  out_color = vec4(1.0);\n}\n```\n\n*Description*\n\n``` glsl\nmediump vec4 gl_FragColor;\n```\n\nThe built-in variable **gl_FragColor** is used by the fragment shader to\nhand over the color of the fragment to the OpenGL ES 2.0 pipeline. The\nvariable is pre-declared as shown above that way the variable can be used\nin the fragment shader for an assignment without prior declaration.\n\nThe values of the color vector are interpreted in the RGBA color space.\n\nThe assignment of values to this variable is mandatory for the fragment\nshader.\n\n- <https://www.shaderific.com/glsl-variables>\n"
    }
  },
  {
    "label": "gl_FragDepth",
    "detail": "establishes a depth value for the current fragment",
    "documentation": {
      "value": "**Fragment depth**\n\n``` glsl\nout float gl_FragDepth;\n```\n\nAvailable only in the fragment language, **gl_FragDepth** is an output\nvariable that is used to establish the depth value for the current\nfragment.\n\nIf depth buffering is enabled and no shader writes to `gl_FragDepth`,\nthen the fixed function value for depth will be used (this value is\ncontained in the `z` component of `gl_FragCoord`) otherwise, the value\nwritten to `gl_FragDepth` is used.\n\nIf a shader statically assigns to `gl_FragDepth`, then the value of the\nfragment's depth may be undefined for executions of the shader that don't\ntake that path. That is, if the set of linked fragment shaders statically\ncontain a write to `gl_FragDepth`, then it is responsible for always\nwriting it.\n\n- <http://docs.gl/sl4/gl_FragDepth>\n"
    }
  },
  {
    "label": "gl_BackColor"
  },
  {
    "label": "gl_BackLightModelProduct"
  },
  {
    "label": "gl_BackLightProduct"
  },
  {
    "label": "gl_BackMaterial"
  },
  {
    "label": "gl_BackSecondaryColor"
  },
  {
    "label": "gl_BaseInstance"
  },
  {
    "label": "gl_BaseVertex"
  },
  {
    "label": "gl_ClipDistance"
  },
  {
    "label": "gl_ClipPlane"
  },
  {
    "label": "gl_ClipVertex"
  },
  {
    "label": "gl_Color"
  },
  {
    "label": "gl_DepthRange"
  },
  {
    "label": "gl_DepthRangeParameters"
  },
  {
    "label": "gl_DrawID"
  },
  {
    "label": "gl_EyePlaneQ"
  },
  {
    "label": "gl_EyePlaneR"
  },
  {
    "label": "gl_EyePlaneS"
  },
  {
    "label": "gl_EyePlaneT"
  },
  {
    "label": "gl_Fog"
  },
  {
    "label": "gl_FogCoord"
  },
  {
    "label": "gl_FogFragCoord"
  },
  {
    "label": "gl_FogParameters"
  },
  {
    "label": "gl_FragData"
  },
  {
    "label": "gl_FrontColor"
  },
  {
    "label": "gl_FrontLightModelProduct"
  },
  {
    "label": "gl_FrontLightProduct"
  },
  {
    "label": "gl_FrontMaterial"
  },
  {
    "label": "gl_FrontSecondaryColor"
  },
  {
    "label": "gl_GlobalInvocationID"
  },
  {
    "label": "gl_HelperInvocation"
  },
  {
    "label": "gl_InstanceID"
  },
  {
    "label": "gl_InvocationID"
  },
  {
    "label": "gl_Layer"
  },
  {
    "label": "gl_LightModel"
  },
  {
    "label": "gl_LightModelParameters"
  },
  {
    "label": "gl_LightModelProducts"
  },
  {
    "label": "gl_LightProducts"
  },
  {
    "label": "gl_LightSource"
  },
  {
    "label": "gl_LightSourceParameters"
  },
  {
    "label": "gl_LocalInvocationID"
  },
  {
    "label": "gl_LocalInvocationIndex"
  },
  {
    "label": "gl_MaterialParameters"
  },
  {
    "label": "gl_MaxClipDistances"
  },
  {
    "label": "gl_MaxClipPlanes"
  },
  {
    "label": "gl_MaxCombinedTextureImageUnits"
  },
  {
    "label": "gl_MaxDrawBuffers"
  },
  {
    "label": "gl_MaxFragmentUniformComponents"
  },
  {
    "label": "gl_MaxGeometryOutputVertices"
  },
  {
    "label": "gl_MaxGeometryTextureImageUnits"
  },
  {
    "label": "gl_MaxGeometryTotalOutputComponents"
  },
  {
    "label": "gl_MaxGeometryUniformComponents"
  },
  {
    "label": "gl_MaxGeometryVaryingComponents"
  },
  {
    "label": "gl_MaxLights"
  },
  {
    "label": "gl_MaxTextureCoords"
  },
  {
    "label": "gl_MaxTextureImageUnits"
  },
  {
    "label": "gl_MaxTextureUnits"
  },
  {
    "label": "gl_MaxVaryingFloats"
  },
  {
    "label": "gl_MaxVertexAttribs"
  },
  {
    "label": "gl_MaxVertexTextureImageUnits"
  },
  {
    "label": "gl_MaxVertexUniformComponents"
  },
  {
    "label": "gl_ModelViewMatrix"
  },
  {
    "label": "gl_ModelViewMatrixInverse"
  },
  {
    "label": "gl_ModelViewMatrixInverseTranspose"
  },
  {
    "label": "gl_ModelViewMatrixTranspose"
  },
  {
    "label": "gl_ModelViewProjectionMatrix"
  },
  {
    "label": "gl_ModelViewProjectionMatrixInverse"
  },
  {
    "label": "gl_ModelViewProjectionMatrixInverseTranspose"
  },
  {
    "label": "gl_ModelViewProjectionMatrixTranspose"
  },
  {
    "label": "gl_MultiTexCoord0"
  },
  {
    "label": "gl_MultiTexCoord1"
  },
  {
    "label": "gl_MultiTexCoord2"
  },
  {
    "label": "gl_MultiTexCoord3"
  },
  {
    "label": "gl_MultiTexCoord4"
  },
  {
    "label": "gl_MultiTexCoord5"
  },
  {
    "label": "gl_MultiTexCoord6"
  },
  {
    "label": "gl_MultiTexCoord7"
  },
  {
    "label": "gl_Normal"
  },
  {
    "label": "gl_NormalMatrix"
  },
  {
    "label": "gl_NormalScale"
  },
  {
    "label": "gl_NumSamples"
  },
  {
    "label": "gl_NumWorkGroups"
  },
  {
    "label": "gl_ObjectPlaneQ"
  },
  {
    "label": "gl_ObjectPlaneR"
  },
  {
    "label": "gl_ObjectPlaneS"
  },
  {
    "label": "gl_ObjectPlaneT"
  },
  {
    "label": "gl_PatchVerticesIn"
  },
  {
    "label": "gl_Point"
  },
  {
    "label": "gl_PointParameters"
  },
  {
    "label": "gl_PointSize"
  },
  {
    "label": "gl_PrimitiveID"
  },
  {
    "label": "gl_PrimitiveIDIn"
  },
  {
    "label": "gl_ProjectionMatrix"
  },
  {
    "label": "gl_ProjectionMatrixInverse"
  },
  {
    "label": "gl_ProjectionMatrixInverseTranspose"
  },
  {
    "label": "gl_ProjectionMatrixTranspose"
  },
  {
    "label": "gl_SampleID"
  },
  {
    "label": "gl_SampleMask"
  },
  {
    "label": "gl_SampleMaskIn"
  },
  {
    "label": "gl_SamplePosition"
  },
  {
    "label": "gl_SecondaryColor"
  },
  {
    "label": "gl_TessCoord"
  },
  {
    "label": "gl_TessLevelInner"
  },
  {
    "label": "gl_TessLevelOuter"
  },
  {
    "label": "gl_TexCoord"
  },
  {
    "label": "gl_TextureEnvColor"
  },
  {
    "label": "gl_TextureMatrix"
  },
  {
    "label": "gl_TextureMatrixInverse"
  },
  {
    "label": "gl_TextureMatrixInverseTranspose"
  },
  {
    "label": "gl_TextureMatrixTranspose"
  },
  {
    "label": "gl_Vertex"
  },
  {
    "label": "gl_VertexID"
  },
  {
    "label": "gl_ViewportIndex"
  },
  {
    "label": "gl_WorkGroupID"
  },
  {
    "label": "gl_WorkGroupSize"
  }
]
