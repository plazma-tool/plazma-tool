# Demo description, this will be deserialiazed into DmoData.

settings:
  start_full_screen: false
  audio_play_on_start: true
  mouse_sensitivity: 0.5
  movement_sensitivity: 0.5
  total_length: 240.0

# FIXME rewrite paths to be relative to project root

context:
  quad_scenes:

    - name: "circle"
      vert_src_path: "./data/sample/data/screen_quad.vert"
      frag_src_path: "./data/sample/data/circle.frag"
      layout_to_vars:
        - Float: [ 0, "Time" ]
        - Vec2: [ 1, "Window_Width", "Window_Height" ]
        - Vec2: [ 2, "Screen_Width", "Screen_Height" ]
      binding_to_buffers: []

    - name: "cross"
      vert_src_path: "./data/sample/data/screen_quad.vert"
      frag_src_path: "./data/sample/data/cross.frag"
      layout_to_vars:
        - Float: [ 0, "Time" ]
        - Vec2: [ 1, "Window_Width", "Window_Height" ]
        - Vec2: [ 2, "Screen_Width", "Screen_Height" ]
      binding_to_buffers:
        - Sampler2D: [ 0, "scene buf" ]

  polygon_scenes:

    - name: "cubes and suzanne"
      scene_objects:

        # When drawing a polygon mesh, uniform locations 0, 1, 2, 3 are
        # always bound to model, view, projection and view_pos.
        #
        # Further locations are bound with layout_to_vars.

        - name: "cube one"
          position:
            Sync:
              - Custom: "cube1#pos.x"
              - Custom: "cube1#pos.y"
              - Custom: "cube1#pos.z"
          euler_rotation:
            Fixed: [ 45.0, 0.0, 45.0 ]
          scale:
            Fixed: 0.5
          layout_to_vars:
            - Float: [ 4, "Time" ]
            - Vec2: [ 5, "Window_Width", "Window_Height" ]
            - Vec2: [ 6, "Screen_Width", "Screen_Height" ]
            - Vec3: [ 7, "Light_Pos_X", "Light_Pos_Y", "Light_Pos_Z" ]
          binding_to_buffers: []

        - name: "suzanne"
          position:
            Fixed: [ 4.0, 0.0, 0.0 ]
          euler_rotation:
            Fixed: [ 0.0, -45.0, 0.0 ]
          scale:
            Fixed: 1.0
          layout_to_vars:
            - Float: [ 4, "Time" ]
            - Vec2: [ 5, "Window_Width", "Window_Height" ]
            - Vec2: [ 6, "Screen_Width", "Screen_Height" ]
            - Vec3: [ 7, "Light_Pos_X", "Light_Pos_Y", "Light_Pos_Z" ]
          binding_to_buffers:
            - Sampler2D: [ 0, "scene buf" ]

        - name: "cube two"
          position:
            Fixed: [ 4.0, 0.0, -2.0 ]
          euler_rotation:
            Fixed: [ 0.0, 0.0, 0.0 ]
          scale:
            Fixed: 0.7
          layout_to_vars:
            - Float: [ 4, "Time" ]
            - Vec2: [ 5, "Window_Width", "Window_Height" ]
            - Vec2: [ 6, "Screen_Width", "Screen_Height" ]
            - Vec3: [ 7, "Light_Pos_X", "Light_Pos_Y", "Light_Pos_Z" ]
          binding_to_buffers:
            - Sampler2D: [ 0, "organic texture buf" ]

        - name: "room box"
          position:
            Fixed: [ 0.0, 0.0, 0.0 ]
          euler_rotation:
            Fixed: [ 0.0, 0.0, 0.0 ]
          scale:
            Fixed: 20.0
          layout_to_vars:
            - Float: [ 4, "Time" ]
            - Vec2: [ 5, "Window_Width", "Window_Height" ]
            - Vec2: [ 6, "Screen_Width", "Screen_Height" ]
            - Vec3: [ 7, "Light_Pos_X", "Light_Pos_Y", "Light_Pos_Z" ]
          binding_to_buffers:
            - Sampler2D: [ 0, "scene buf" ]

        #- name: "light"
        #  position:
        #    Sync: [ "Light_Pos_X", "Light_Pos_Y", "Light_Pos_Z" ]
        #  euler_rotation:
        #    Fixed: [ 0.0, 0.0, 0.0 ]
        #  scale:
        #    Fixed: 0.1
        #  layout_to_vars: []
        #  binding_to_buffers: []

  polygon_context:

    models:

      # The vert_src_path and frag_src_path of the model will be used
      # to set the shaders on each mesh.
      #
      # Cube type models will have a mesh loaded from a static array.
      #
      # Obj type models will include all the meshes from the .obj file, and each
      # will run the same shader.

      # FIXME Cube type cube is rendered with faces inside out

      - name: "cube one"
        model_type: Cube
        vert_src_path: "./data/sample/data/scene_object.vert"
        frag_src_path: "./data/sample/data/cube_one.frag"
        obj_path: ""

      - name: "cube two"
        model_type: Obj
        vert_src_path: "./data/sample/data/scene_object.vert"
        frag_src_path: "./data/sample/data/cube_two.frag"
        obj_path: "./data/sample/data/cube.obj"

      - name: "room box"
        model_type: Cube
        vert_src_path: "./data/sample/data/scene_object.vert"
        frag_src_path: "./data/sample/data/cube_one.frag"
        obj_path: ""

      - name: "suzanne"
        model_type: Obj
        vert_src_path: "./data/sample/data/scene_object.vert"
        frag_src_path: "./data/sample/data/suzanne.frag"
        obj_path: "./data/sample/data/suzanne.obj"

      #- name: "light"
      #  model_type: Cube
      #  vert_src_path: "./data/sample/data/scene_object.vert"
      #  frag_src_path: "./data/sample/data/light.frag"
      #  obj_path: ""

  frame_buffers:
    - { name: "scene buf",
        kind: Empty_Texture, format: RGBA_u8,
        image_path: "" }

    - { name: "organic texture buf",
        kind: Image_Texture, format: RGB_u8,
        image_path: "./data/sample/data/images/organic4 1024x1024 3ch uint8.jpg" }

    - { name: "gray noise medium buf",
        kind: Image_Texture, format: RED_u8,
        image_path: "./data/sample/data/images/gray-noise-medium-256x256-1ch-uint8.png" }

    - { name: "rgba noise medium buf",
        kind: Image_Texture, format: RGBA_u8,
        image_path: "./data/sample/data/images/rgba-noise-medium-256x256-4ch-uint8.png" }

    - { name: "rock tiles",
        kind: Image_Texture, format: RGB_u8,
        image_path: "./data/sample/data/images/rock tiles 512x512 3ch uint8.jpg" }

    - { name: "rock surface",
        kind: Image_Texture, format: RGB_u8,
        image_path: "./data/sample/data/images/rock-1024x1024-3ch-uint8.jpg" }

    - { name: "font1",
        kind: Image_Texture, format: RGBA_u8,
        image_path: "./data/sample/data/images/font1 1024x1024 4ch uint8.png" }

  sync_tracks_path: "./data/sample/data/demo.rocket"

  # Leave empty. Will be populated with shader sources read from paths.
  shader_sources: []

timeline:

  tracks:

    - scene_blocks:

        - start: 0.0
          end: 200.0
          draw_ops:
            - Target_Buffer: "scene buf"
            - Clear: [ 50, 0, 0, 0 ]
            - Target_Buffer: "RESULT_IMAGE"
            - Clear: [ 0, 50, 0, 0 ]
            - Draw_Poly_Scene: "cubes and suzanne"

#        - start: 0.0
#          end: 200.0
#          draw_ops:
#            - Target_Buffer: "scene buf"
#            - Clear: [ 0, 0, 0, 0 ]
#            - Draw_Quad_Scene: "circle"
#            - Target_Buffer: "RESULT_IMAGE"
#            - Clear: [ 0, 0, 0, 0 ]
#            - Draw_Quad_Scene: "cross"

#        - start: 10.0
#          end: 20.0
#          draw_ops:
#            - Target_Buffer: "RESULT_IMAGE"
#            - Clear: [ 0, 0, 0, 0 ]
#            - Draw_Quad_Scene: "circle"


